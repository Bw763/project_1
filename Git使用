在项目根目录利用git bash 在调用 git init创建一个空的git仓库
工作区的四种状态:
未跟踪：是没有被git管理的文件 
已被git管理的文件：未修改 已修改 已暂存

git status检查文件状态 git status -s 检查文件状态 U
添加跟踪文件 git add 文件名 A表示已放在暂存区中 A
将暂存区中的文件提交到git仓库中 git commit -m "提交消息"
提交之后对文件进行修改，该文件已被跟踪但没有放在暂存区中 红M
暂存已修改的文件 git add  绿M          暂存多个文件 git add .
提交 git commit -m "提交消息"
撤销对指定文件的修改，使该文件返回至git仓库中保存的样子 git checkout -- 文件名

将文件移出暂存区  git reset HEAD 文件名 .号相当于全选

git工作流程 添加跟踪 -> 工作区 -》暂存区 -》git仓库
跳过暂存区git commit -a -m "提交消息"

移除文件
从git仓库和工作区同时移除 git rm -f 文件名
只从git仓库中移除 git rm --cached 文件名

创建忽略文件 .gitignore
.a 忽略.a为后缀的文件
!sd.a 不忽略sd.a文件
/build 忽略当前目录下的build文件
build/ 忽略任何目录下build文件
doc/*.txt 忽略doc文件下的 .txt文件
doc/**/*.txt 忽略doc所有目录下的 .txt文件

查看提交历史
git log 查看所有提交历史
git log -* 查看前*次提交历史
git log -* --pretty=oneline 将所有的历史信息在一行显示
             哈希值   作者  事件  说明
--pretty=oneline:"%h | %an |%ar |%s"

回退版本
git reset --hard 哈希值
回到指定版本后
git reflog --pretty=oneline 好看所有历史记录
git reset --hard 哈希值